1. npm init

2. npm install --save-dev hardhat

3. npx hardhat -> empty project

4. create contracts, scripts and test folder

5. npm install @openzeppelin/contracts

6. create nft.sol in contracts

7. Importing contracts from openzeppelin
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";

8. Create a contract that inherits from ERC721URIStorage and is Ownable
contract NFT is ERC721URIStorage, Ownable {}

9. Using the Counter to keep track of Tokenids. 
using Counters for Counters.Counter;
Counters.Counter private _tokenIds;

10. Create a constructor containing NFT name and id
constructor() ERC721("Timeless Porsche NFTs", "POR") {}

11. Create a mint function
    function mintNFT(address recipient, string memory tokenURI) public onlyOwner returns (uint256) {
        // Increment the token id
        _tokenIds.increment();

        uint256 newItemId = _tokenIds.current();
        _mint(recipient, newItemId);
        _setTokenURI(newItemId, tokenURI);

        return newItemId;
    }

12. npm install dotenv --save

13. npm install --save-dev @nomiclabs/hardhat-ethers 'ethers@^5.0.0'

14. edit the hardhat config
    *** Error ***
  * Invalid value undefined for HardhatConfig.networks.sepolia.url - Expected a value of type string.
  * Invalid account: #0 for network: sepolia - private key too short, expected 32 bytes

15. Create a deploy.js file in deploy

*** Linking to image *** 
npm install @alch/alchemy-web3

16. Create mint-nft file

17. Pinata accounts and upload 

18. Create NFT meta-data.json

19. run mint nft
- Was getting error nonce too low -> wrong account's public key